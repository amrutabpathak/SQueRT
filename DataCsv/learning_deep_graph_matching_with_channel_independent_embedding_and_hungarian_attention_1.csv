Published as a conference paper at ICLR 2020  LEARNING DEEP GRAPH MATCHING VIA CHANNEL- INDEPENDENT EMBEDDING AND HUNGARIAN ATTEN- TION  Tianshu Yu†, Runzhong Wang‡, Junchi Yan‡, Baoxin Li† †Arizona State University ‡Shanghai Jiao Tong University {tianshuy,baoxin.li}@asu.edu {runzhong.wang,yanjunchi}@sjtu.edu.cn  ABSTRACT  Graph matching aims to establishing node-wise correspondence between two graphs, which is a classic combinatorial problem and in general NP-complete.
<EOS>
Un- til very recently, deep graph matching methods start to resort to deep networks to achieve unprecedented matching accuracy.
<EOS>
Along this direction, this paper makes two complementary contributions which can also be reused as plugin in existing works: i) a novel node and edge embedding strategy which stimulates the multi- head strategy in attention models and allows the information in each channel to be merged independently.
<EOS>
In contrast, only node embedding is accounted in pre- vious works; ii) a general masking mechanism over the loss function is devised to improve the smoothness of objective learning for graph matching.
<EOS>
Using Hungar- ian algorithm, it dynamically constructs a structured and sparsely connected layer, taking into account the most contributing matching pairs as hard attention.
<EOS>
Our approach performs competitively, and can also improve state-of-the-art methods as plugin, regarding with matching accuracy on three public benchmarks.
<EOS>
 1  INTRODUCTION  Without loss of generality, we consider the bijection problem for graph matching: given graph G1 and G2 of equal size n, graph matching seeks to find the one-vs-one node correspondence1:  max  x(cid:62)Kx  x  s.t. Px = 1  (1)  where x = vec(X) ∈ {0, 1}n2 which is the column-wise vectorized form of the permutation ma- trix X that encodes the node-to-node correspondence between two graphs, and K ∈ Rn2×n2 is the so-called affinity matrix2, respectively.
<EOS>
Note P is a selection matrix encoding the one-to-one correspondence constraint.
<EOS>
This problem is called Lawler’s QAP (Lawler, 1963) and has attracted enormous attention for its generally NP-complete (Hartmanis, 1982) challenge, as well as a wide spectrum of applications in computer vision, graphics, machine learning and operational research etc.
<EOS>
In particular, Koopmans-Beckmann’s QAP  with objective tr(X(cid:62)F1XF2) is a special case of Eq. (1), which can be converted to Lawler’s QAP by K = F2 ⊗ F1 and Fi refers to the weighted adjacency matrix.
<EOS>
A series of solvers haven been developed to solve graph match- ing problem (Leordeanu & Hebert, 2005; Cho et al, 2010; Bernard et al, 2018; Yan et al, 2015; Yu et al, 2018).
<EOS>
All these methods are based on deterministic optimization, which are conditioned with pre-defined affinity matrix and no learning paradigm is involved.
<EOS>
This fact greatly limits the performance and broad application w.r.t. different problem settings considering its NP-hard nature.
<EOS>
 +  Recently, the seminal work namely deep graph matching (DGM)  is proposed to exploit the high capacity of deep networks for graph matching, which achieves state- of-the-art performance.
<EOS>
This is in contrast to some early works which incorporate learning strategy  1We assume graphs are of equal size for narrative simplicity.
<EOS>
One can easily handle unbalanced graph size  by adding dummy nodes as a common protocol in graph matching literature .
<EOS>
 2Aia:jb typically encodes the affinity between pair (i, j) and (a, b) where node i, j ∈ G1 and a, b ∈ G2.
<EOS>
 1  Published as a conference paper at ICLR 2020  separately in local stages (Caetano et al, 2009; Cho et al, 2013).
<EOS>
On the other hand, Graph Convolu- tional Networks (GCN)  brings about new capability on tasks over graph-like data, as it naturally integrates the intrinsic graph structure in a general updating rule:  H(l+1) = σ  (cid:16) ˆAH(l)W(l)(cid:17)  (2)  where ˆA is the normalized connectivity matrix.
<EOS>
H(l) and W(l) are the features and weights at layer l, respectively.
<EOS>
Node embedding is updated by aggregation from 1-neighboring nodes, which is akin to the convolution operator in CNN.
<EOS>
By taking advantages of both DGM and GCN, Wang et al (2019) and Zhang & Lee (2019) incorporate permutation loss instead of displacement loss in , with notable improvement across both synthetic and real data.
<EOS>
 Note that Eq. (1) involves both node and edge information, which exactly correspond to the diag- onal and off-diagonal elements in K, respectively.
<EOS>
Edges can carry informative multi-dimensional attributes (namely weights) which are fundamental to graph matching.
<EOS>
However existing embed- ding based graph matching methods (Wang et al, 2019; Xu et al, 2019) are focused on the explicit modeling of node level features, whereby the edges are only used as topological node connection for message passing in GCN.
<EOS>
Besides, edge attributes are neither well modeled in the embedding-free model  since the edge information is derived from the concatena- tion of node features.
<EOS>
To our best knowledge, there is no deep graph matching method explicitly incorporating edge attributes.
<EOS>
In contrast, edge attributes e.g. length and orientation are widely used in traditional graph matching models (Cho et al, 2010; Yan et al, 2015; Yu et al, 2018) for constructing the affinity matrix K. Such a gap shall be filled in the deep graph matching pipeline.
<EOS>
 Another important consideration refers to the design of loss function.
<EOS>
There are mainly two forms in existing deep graph matching works: i) displacement loss  similar to the use in optical ﬂow estimation ; ii) the so-called permutation loss  involving iterative Sinkhorn procedure followed by a cross-entropy loss.
<EOS>
Results in  show the latter is an effective improvement against the former regression based loss.
<EOS>
However, we argue that the continuous Sinkhorn procedure (in training stage) is yet an unnatural approximation to Hungarian sampling (in testing stage) for discretization.
<EOS>
If the network is equipped with a continuous loss function (e.g. cross-entropy), we argue that the training process will make a great “meaningless effort” to enforce some network output digits of the final matching matrix into binary and neglect the resting digits which might have notable impact on accuracy.
<EOS>
 This paper strikes an endeavor on the above two gaps and makes the following main contributions:  i) We propose a new approach for edge embedding via channel-wise operation, namely channel- independent embedding (CIE).
<EOS>
The hope is to effectively explore the edge attribute and simulate the multi-head strategy in attention models (Veliˇckovi´c et al, 2018) by decoupling the calculations parallel and orthogonal to channel direction.
<EOS>
In fact, edge attribute information has not been consid- ered in existing embedding based graph matching methods (Wang et al, 2019; Xu et al, 2019).
<EOS>
 ii) We devise a new mechanism to adjust the loss function based on the Hungarian method which is widely used for linear assignment problem, as termed by Hungarian attention.
<EOS>
It resorts to dynami- cally generating sparse matching mask according to Hungarian sampling during training, rather than approximating Hungarian sampling with a differentiable function.
<EOS>
As such, the Hungarian attention introduces higher smoothness against traditional loss functions to ease the training.
<EOS>
 iii) The empirical results on three public benchmarks shows that the two proposed techniques are orthogonal and beneficial to existing techniques.
<EOS>
Specifically, on the one hand, our CIE module can effectively boost the accuracy by exploring the edge attributes which otherwise are not consid- ered in state-of-the-art deep graph matching methods; on the other hand, our Hungarian attention mechanism also shows generality and it is complementary to existing graph matching loss.
<EOS>
 2 RELATED WORKS  Graph embedding.
<EOS>
To handle graph-like data, early works adopt recursive neural networks (RNNs) treating input as directed acyclic graphs (Sperduti & Starita, 1997; Frasconi et al, 1998).
<EOS>
Gori et al (2005); Scarselli et al (2008) generalized early models to graph neural networks (GNNs) so as to be directly applied on cyclic, directed or undirected graphs.
<EOS>
Li et al (2016) further improved this line  2  Published as a conference paper at ICLR 2020  of model by replacing standard RNNs with gated recurrent units (GRUs) .
<EOS>
Inspired by the great success of convolutional neural networks (CNNs) (Simonyan & Zisserman, 2014; He et al, 2016), researchers have made tremendous effort on applying convolution operator to graphs (Bruna et al, 2014; Kipf & Welling, 2017; Gong & Cheng, 2019).
<EOS>
Bruna et al (2014) defined a convolution operator in Fourier domain which is obtained by performing eigen-decomposition on graph Laplacian.
<EOS>
However, such convolution will affect the whole spatial domain once taking inverse Fourier transformation.
<EOS>
This method was improved by Chebyshev expansion to approximate filters .
<EOS>
Kipf & Welling (2017) propose a graph convolutional operator over 1-neighbor nodes derived from graph spectral theory, which is invariant to node permutation and achieved significant performance on semi-supervised learning tasks.
<EOS>
There are series of works following GCN, such as GraphSAGE , GAT (Veliˇckovi´c et al, 2018) and MPNN .
<EOS>
Refer to  for a more comprehensive survey.
<EOS>
 While the aforementioned models are focused on learning node state/embedding, a parallel line of work seek to learn edge embedding by taking into account the information carried on edges (Li et al, 2016; Gilmer et al, 2017; Gong & Cheng, 2019).
<EOS>
Edges are intrinsic portion of graphs, and thus edge embedding can be essential to reveal the relation among nodes.
<EOS>
Gilmer et al (2017) introduce a general embedding network incorporating edge information and node-edge information merging, and a serious of works fall into this framework e.g. Gated GNN , Tensor GNN (Sch¨utt et al, 2017) and EGNN .
<EOS>
An improved version is devised in Chen et al (2019) by interpreting this framework as maximizing mutual information across layers.
<EOS>
 Loss for combinatorial learning.
<EOS>
For the relatively easy linear assignment problem, it has been known that Sinkhorn algorithm (Sinkhorn, 1964) is the approximate and differentiable version of Hungarian algorithm .
<EOS>
The Sinkhorn Network  is de- veloped given known assignment cost, whereby doubly-stochastic regulation is performed on input non-negative square matrix.
<EOS>
Patrini et al (2018) devise the Sinkhorn AutoEncoder to minimize Wasserstein distance, and Emami & Ranka (2018) propose to learning a linear assignment solver via reinforcement learning.
<EOS>
For permutation prediction, DeepPermNet (Santa Cruz et al, 2018) adopts the Sinkhorn layer on top of a deep convolutional network.
<EOS>
However this method cannot be directly applied for graph matching as it is not invariant to input permutations which is conditioned on a predefined node permutation as reference.
<EOS>
In particular, existing supervised methods on combi- natorial learning are generally cross-entropy-based.
<EOS>
Pointer Net  incorporates cross-entropy loss on learning heuristics for combinatorial problems.
<EOS>
Milan et al (2017) propose an objective-based loss, where the gradients are only updated if the objective improves after update.
<EOS>
 Learning for graph matching.
<EOS>
The early effort  aims to incorporate learning to graph matching.
<EOS>
The key is to learn a more effective affinity function with given correspon- dence as supervision.
<EOS>
While the ability by only learning affinity is limited, Cho et al (2013) pro- pose a matching function learning paradigm using histogram-based attributes with Structured-SVM .
<EOS>
A recent work  is a breakthrough to introduce deep learning paradigm into graph matching task, which utilizes a neural network to learn the affinity function.
<EOS>
The learning procedure is explicitly derived from the factorization of affinity matrix (Zhou & De la Torre, 2012), which makes the interpretation of the network behavior possible.
<EOS>
However, the displacement loss in  measures the pixel-wise transla- tion which is similar to optical-ﬂow , being essentially a regression task instead of combinaotiral optimization.
<EOS>
Seeing this limitation, Wang et al (2019) employ element- wise binary cross-entropy, termed as permutation loss.
<EOS>
This loss has proved capable of capturing the combinatorial nature rather than pixel offset, and achieves improvement over displacement loss.
<EOS>
Node embedding is also used in  to explore the structure information.
<EOS>
 3 THE PROPOSED LEARNING APPROACH FOR GRAPH MATCHING  3.1 APPROACH OVERVIEW  An overall structure of our approach is illustrated in Fig 1.
<EOS>
In line with , we em- ploy VGG16  to extract features from input images and bi-linearly interpolate the features at key points (provided by datasets).
<EOS>
We concatenate lower-level (Relu4 2) and higher-level (Relu5 1) features to incorporate local and contextual information.
<EOS>
For an image with k key points, the feature is denoted as H ∈ Rk×d, where d is the feature dimension.
<EOS>
Unless  3  Published as a conference paper at ICLR 2020  Figure 1: Architecture overview of the proposed deep graph matching networks that consist of the proposed channel-independent embedding and Hungarian attention layer over the loss function. otherwise specified, the adjacency matrix A ∈ Rk×k is consequentially constructed via Delaunay triangulation , which is a widely adopted strategy to produce sparsely con- nected graph.
<EOS>
To introduce more rich edge information, we also generate k × k m-dimensional edge features E ∈ Rm×k×k.
<EOS>
E can be initialized with some basic edge information (e.g. length and angle and other attributes) or a commutative function Eij = p(Hi, Hj) = p(Hj, Hi) ∈ Rm, where Hi refers to the feature of node i. Note for directed graph, the commutative property is not required.
<EOS>
 The features H and E, together with the adjacency A, are then fed into GNN module.
<EOS>
Pairs of features are processed in a Siamese fashion .
<EOS>
Standard GCN’s message passing rule simply updates node embedding as shown in Eq. (2).
<EOS>
In contrast, each GNN layer in our model computes a new pair of node and edge embeddings simultaneously:  0 and W l  H(l+1) = fi(H(l), E(l), A; W l  (3) where W l 1 are the learnable parameters at layer l. The edge information is essential to provide structural feature enhancing graph matching.
<EOS>
We initialize H(0) = H and E(0) = E in our setting.
<EOS>
We will discuss the details of functions f and g in Sec.
<EOS>
3.2. Following state-of-the-art work , we also compute the cross-graph affinity followed by a column/row-wise softmax activation and a Sinkhorn layer :  0), E(l+1) = g(H(l), E(l), A; W l 1)  Mij = exp  τ H(cid:62)  (1)iΛH(2)j  , S = Sinkhorn(M)  (cid:16)  (cid:17)  Note here M ∈ Rk×k is the node-level similarity matrix encoding similarity between two graphs, differing from the edege-level affinity matrix K in Eq. 1. τ is the weighting parameter of similarity, Λ contains learnable parameters and H(1)i is the node i’s embedding from graph G1.
<EOS>
The output S ∈ [0, 1]k×k, S1 = 1, S(cid:62)1 = 1 is a so-called doubly-stochastic matrix.
<EOS>
Here Sinkhorn(·) denotes the following update iteratively to project M into doubly stochastic polygon:  M(t+1) = M(t) −  M(t)11(cid:62) −  11(cid:62)M(t) +  1 n  1 n2 11(cid:62)M(t)11(cid:62) −  1 n  11(cid:62)  1 n  The Sinkhorn layer is shown to be an approximation of Hungarian algorithm which produces discrete matching output (Kuhn, 1955).
<EOS>
As there are only matrix multiplication and normalization operators involved in Sinkhorn layer, it is differentiable.
<EOS>
In practice, Eq. (5) converges rapidly within 10 iterations for decades of nodes.
<EOS>
Less iterations involved, more precise back-propagated gradients can be achieved.
<EOS>
We employ a cross-graph node embedding strategy following :  H(l)  (1) = fc  (cid:16) cat(H(l)  (cid:17) (1), SH(l) (2))  , H(l)  (2) = fc  cat(H(l)  (2), S(cid:62)H(l) (2))  (cid:16)  (cid:17)  where fc is a network and cat(·, ·) is the concatenation operator.
<EOS>
H(i) is the node feature of graph i. This procedure seeks to merge similar features from another graph into the node feature in current graph.
<EOS>
It is similar to the feature transfer strategy in  for sparse correspon- dence, which employs a feature merging method analogous to style transfer .
<EOS>
 As Sinkhorn layer does not necessarily output binary digits, we employ Hungarian algorithm (Kuhn, 1955) to discretize matching output S in testing.
<EOS>
The testing differs from the training due to the Hungarian discretization.
<EOS>
We introduce a novel attention-like mechanism termed as Hungarian attention, along with existing loss functions (will be detailed in Sec.
<EOS>
3.3).
<EOS>
The final training loss is as follows, where SG and H correspond to binary true matching and Hungarian attention loss.
<EOS>
 (4)  (5)  (6)  (7)  min H(S, SG)  4  CNNGaussian	kernelimage	1initial	node	embeddinginitial	edge	embeddingCIEnode	embeddingedge	embeddingcross	graphnode	embeddingedge	embeddingnode	embeddingedge	embeddingCIECNNGaussian	kernelinitial	node	embeddinginitial	edge	embeddingCIEnode	embeddingedge	embeddingcross	graphnode	embeddingedge	embeddingCIEnode	embeddingedge	embeddingaffinityaffinityimage	2similarity	matrixdoubly-stochastic	matrixSinkhornHungarian	attentionground	truth	matchinglossPublished as a conference paper at ICLR 2020  Figure 2: Illustration of the proposed CIE layer for embedding based deep graph matching.
<EOS>
The operation “Linear” refers to the linear mapping, e.g. H(l)  w → W(l)  w in Eq (9).
<EOS>
 2 H(l)  3.2 CHANNEL-INDEPENDENT EMBEDDING  We detail the updating rule in Eq. (3).
<EOS>
We propose a method to merge edge features into node features and perform matching on nodes.
<EOS>
Edge information acts an important role in modeling relational data, whereby such relation can be complex thus should be encoded with high-dimensional feature.
<EOS>
To this end, Gilmer et al (2017) introduce a general embedding layer, which takes node and edge features and outputs a message to node v, then fuses the message and the current embedding:  m(l)  v = σ  ft (Evw) H(l)  w + W(l)H(l)  , H(t+1)  v  = ut  H(t)  v , m(l) v  (8)  (cid:16)  (cid:17)  (cid:33)  (cid:32)  (cid:88)  w∈Nv  v and H(l)  where Evw is the feature corresponding to edge (v, w).
<EOS>
In the realization of Eq. (8) , m(l) v are fed to GRU  as a sequential input.
<EOS>
There are several variants which take into account specific tasks (Li et al, 2016; Sch¨utt et al, 2017; Chen et al, 2019).
<EOS>
Among these, Li et al (2016) generates a transformation matrix for each edge and Sch¨utt et al (2017) resorts to merge embedding via fully connected neural networks.
<EOS>
While edge-wise merging is straightforward, the representation ability is also limited.
<EOS>
On the other hand, fully connected merging strategy will result in high computational cost and instability for back-propagation.
<EOS>
To address these issues, we propose to merge embedding in a channel-wise fashion, which is termed as Channel-Independent Embedding (CIE).
<EOS>
Concretely, the updating rule is written as:  H(l+1)  v  = σ        (cid:16)  (cid:88)  (cid:16)  w∈Nv  ΓN (cid:124)  W(l)  vw ◦ W(l) 1 E(l) (cid:123)(cid:122)  2 H(l) w  channel-wise operator/function (cid:17)    (cid:17)     (cid:125)  E(l+1)  vw = σ  W(l)  1 E(l) vw  (cid:16)  + σ  W(l)  0 H(l) v  (cid:17)  (9)  (10)  where ΓN(· ◦ ·) is a channel-wise operator/function (above the underbrace), and it performs calcu- lation per-channel and the output channel dimension is the same as input.
<EOS>
The second σ(·) term is the message a node passes to itself, which is necessary in keeping the node information contextually consistent through each CIE layer.
<EOS>
In this fashion, CIE is thus a procedure to aggregate node and 2 H(l) edge embedding in each channel independently, which requires the dimensions of node (W(l) w ) and edge (W(l) vw) representations to be equal.
<EOS>
Similarly, we also propose an corresponding up- dating rule of edge embedding by substituting Eq. (10):  1 E(l)  E(l+1)  vw = σ  (cid:16)  (cid:16)  ΓE  W(l)  1 E(l)  vw ◦ h  H(l)  v , H(l) w  (cid:16)  (cid:17)(cid:17)(cid:17)  (cid:16)  + σ  (cid:17)  W(l)  1 E(l) vw  (11)  where h(·, ·) is commutative h(X, Y) = h(Y, X).
<EOS>
Eq. (11) is supplementary to Eq. (9).
<EOS>
 Fig 2 shows a schematic diagram of CIE layer, which is motivated from two perspectives.
<EOS>
First, CIE is motivated by counterparts in CNN (Qiu et al, 2017; Tran et al, 2018) which decouple a 3D convolution into two 2D ones (e.g. a 3 × 3 × 3 convolution can be decomposed to a 1 × 3 × 3 and a 3 × 1 × 1 convolutions).
<EOS>
In this sense, the number of parameters can be significantly reduced.
<EOS>
As shown in Fig 2, node and edge embedding is first manipulated along the channel direction via a linear layer, then operated via ΓN and ΓE orthogonal to the channel direction.
<EOS>
Instead of merging node and edge as a whole, CIE layer decouples it into two operations.
<EOS>
Second, CIE is also motivated by the triumph of multi-head structure (e.g. graph attention (Veliˇckovi´c et al, 2018)), the key of  5  𝐄(#)𝐇(#)LinearLinearΓ’Γ(𝐄(#)*)𝐇(#)*)𝑚×𝑘×𝑘𝑚×𝑘𝑚channels𝜎𝜎Published as a conference paper at ICLR 2020  Figure 3: A working example illustrating of our proposed Hungarian attention pipeline starting from similarity matrix.
<EOS>
Sinkhorn algorithm solves similarity matrix into a doubly-stochastic matrix in a differentiable way.
<EOS>
A discrete permutation matrix is further obtained via Hungarian algorithm.
<EOS>
Our proposed Hungarian attention, taking the ground truth matching matrix into account, focuses on the “important” digits either labeled true or being mis-classified.
<EOS>
The output matrix is obtained by attention pooling from doubly-stochastic matrix, where we compute a loss on it. which is to conduct unit calculation multiple times and concatenate the results.
<EOS>
Multi-head proved effective to further improve the performance since it is capable of capturing information at different scales or aspects.
<EOS>
Traditional neural node-edge message passing algorithms (Gilmer et al, 2017; Li et al, 2016; Sch¨utt et al, 2017) typically produce a unified transformation matrix for all the channels.
<EOS>
On the other hand, in Eq. (9) (10) and (11), one can consider that the basic operator in each channel is repeated d times in a multi-head fashion.
<EOS>
The cross-channel information exchange, as signified in Eq. (9) (10) and (11), only happens before the channel-wise operator (i.e. weights W(l) i as the cross- channel matrices).
<EOS>
The main difference between CIE and traditional multi-head approaches e.g. (Veliˇckovi´c et al, 2018) is that CIE assumes the channel-independence of two embedded features (node and edge), while traditional ones only take one input under head-independence assumption.
<EOS>
 3.3 HUNGARIAN ATTENTION MECHANISM  For most graph matching algorithms, the output is in a continuous domain.
<EOS>
Though there are some alternatives that deliver discrete solutions by adding more constraints or introducing numerical con- tinuation (Zhou & De la Torre, 2012; Yu et al, 2018), the main line of methods is to incorporate a sampling procedure (e.g. winner-take-all and Hungarian).
<EOS>
Among them, the Hungarian algorithm (Kuhn, 1955) is a widely adopted, for its efficiency and theoretical optimality.
<EOS>
 However, the Hungarian algorithm incurs a gap between training (loss function) and testing stages (Hungarian sampling).
<EOS>
We compare the permutation loss  for concrete analysis:  LCE = −  (cid:88)  (cid:0)SG  ij log Sij + (cid:0)1 − SG  ij  (cid:1) log (1 − Sij)(cid:1)  (12)  i∈G1,j∈G2  Note Eq. (12) is an element-wise version of binary cross-entropy.
<EOS>
During training, this loss tends to drag the digits in S into binary format and is likely trapped to local optima.
<EOS>
This is because this loss will back-propagate the gradients of training samples that are easy to learn in the early training stage.
<EOS>
In later iterations, this loss is then hard to give up the digits that have become binary.
<EOS>
In fact, the similar phenomenon is also investigated in the focal loss  in comparison to the traditional cross-entropy loss.
<EOS>
During the testing stage, however, the Hungarian algorithm has no preference on the case if digits in S are close to 0 − 1 or not.
<EOS>
It binarizes S anyway.
<EOS>
Therefore, the effort of Eq. (12) to drag S into binary might be meaningless.
<EOS>
 This issue is likely to be solved by integrating Hungarian algorithm during the training stage.
<EOS>
Un- fortunately, Hungarian algorithm is undifferentiable and its behavior is difficult to mimic with a differentiable counterpart.
<EOS>
In this paper, instead of finding a continuous approximation of Hungar- ian algorithm, we treat it as a black box and dynamically generate network structure (sparse link)  6  012345abcdef1.41.73.83.80.80.81.33.60.90.82.16.72.50.44.31.20.71.00.41.81.91.12.73.81.11.50.50.40.63.60.80.72.72.15.51.0similarity matrix012345abcdef0.20.10.20.40.10.00.10.30.10.10.10.30.30.00.30.10.10.10.10.20.10.10.20.20.20.20.10.10.10.30.10.10.20.20.40.0doubly-stochastic matrix012345abcdef0.00.00.01.00.00.00.01.00.00.00.00.01.00.00.00.00.00.00.00.01.00.00.00.00.00.00.00.00.01.00.00.00.00.01.00.0permutation matrix012345abcdef0.00.00.01.00.00.01.00.00.00.00.00.00.01.00.00.00.00.00.00.01.00.00.00.00.00.00.00.00.01.00.00.00.00.01.00.0ground truth matrix012345abcdef0.00.00.01.00.00.01.01.00.00.00.00.01.01.00.00.00.00.00.00.01.00.00.00.00.00.00.00.00.01.00.00.00.00.01.00.0attention activation012345abcdef0.00.00.00.40.00.00.10.30.00.00.00.00.30.00.00.00.00.00.00.00.10.00.00.00.00.00.00.00.00.30.00.00.00.00.40.0output matrixSinkhornHungarianAttention PoolingHungarian AttentionPublished as a conference paper at ICLR 2020  Table 1: Accuracy on Pascal VOC (best in bold).
<EOS>
White and gray background refer to results on test- ing and training, respectively.
<EOS>
Compared methods include GMN , GAT (Veliˇckovi´c et al, 2018), EPN , PCA/PIA .
<EOS>
 method aero bike bird boat bottle bus car cat chair cow table dog horse mbike person plant sheep sofa train tv Ave GMN-D 31.9 47.2 51.9 40.8 68.7 72.2 53.6 52.8 34.6 48.6 72.3 47.7 54.8 51.0 38.6 75.1 49.5 45.0 83.0 86.3 55.3 34.1 77.5 57.1 53.6 83.2 88.6 57.9 GMN-P 31.1 46.2 58.2 45.9 70.6 76.4 61.2 61.7 35.5 53.7 58.9 57.5 56.9 49.3 39.5 82.0 66.9 50.1 78.5 90.3 63.6 GAT-P 46.4 60.5 60.9 51.8 79.0 70.9 62.7 70.1 39.7 63.9 66.2 63.8 65.8 62.8 GAT-H 47.2 61.6 63.2 53.3 79.7 70.1 65.3 70.5 38.4 64.7 62.9 65.1 66.2 62.5 41.1 78.8 67.1 61.6 81.4 91.0 64.6 39.9 80.5 66.7 45.5 77.6 90.6 63.2 EPN-P 47.6 65.2 62.2 52.7 77.8 69.5 63.4 69.6 37.8 62.8 63.6 63.9 64.6 61.9 PIA-D 39.7 57.7 58.6 47.2 74.0 74.5 62.1 66.6 33.6 61.7 65.4 58.0 67.1 58.9 41.9 77.7 64.7 50.5 81.8 89.9 61.6 PIA-P 41.5 55.8 60.9 51.9 75.0 75.8 59.6 65.2 33.3 65.9 62.8 62.7 67.7 62.1 42.9 80.2 64.3 59.5 82.7 90.1 63.0 44.9 77.5 67.4 57.5 86.7 90.9 63.8 PCA-P 40.9 55.0 65.8 47.9 76.9 77.9 63.5 67.4 33.7 65.5 63.6 61.3 68.9 62.8 40.5 84.7 66.1 47.9 80.5 91.1 64.6 PCA-H 49.8 60.7 63.9 52.6 79.8 72.5 63.8 71.2 38.4 62.5 71.7 65.4 66.6 62.5 PCA+-P 46.6 61.0 62.3 53.9 78.2 72.5 64.4 70.5 39.0 63.5 74.8 65.2 65.0 61.6 40.8 83.2 67.1 50.5 79.6 91.6 64.6 CIE2-P 50.9 65.5 68.0 57.0 81.0 75.9 70.3 73.4 41.1 66.7 53.2 68.3 68.4 63.5 45.3 84.8 69.7 57.2 79.8 91.6 66.9 CIE2-H 51.2 68.4 69.5 57.3 82.5 73.5 69.5 74.0 40.3 67.8 60.0 69.7 70.3 65.1 44.7 86.9 70.7 57.3 84.2 92.2 67.4 46.1 85.1 70.4 61.6 80.7 91.7 68.1 CIE1-P 52.1 69.4 69.9 58.9 80.6 76.3 71.0 74.2 41.1 68.0 60.4 69.7 70.7 65.1 44.8 85.2 69.9 65.4 85.2 92.4 68.9 CIE1-H 51.2 69.2 70.1 55.0 82.8 72.8 69.0 74.2 39.6 68.8 71.8 70.0 71.8 66.8 66.5 99.1 80.7 99.7 98.2 97.0 88.2 PCA-P 75.8 99.2 83.3 74.7 98.7 96.3 74.3 87.8 80.9 85.7 100.0 83.7 83.8 98.7 46.1 94.8 72.7 93.6 93.7 91.6 76.2 CIE1-P 56.5 84.0 73.5 58.0 91.5 81.1 67.8 76.8 46.4 72.2 98.0 73.9 73.6 77.9 CIE1-H 59.4 88.1 75.9 58.0 94.3 81.9 69.4 78.9 49.5 78.2 99.7 78.1 78.0 82.1 47.4 95.8 75.7 97.6 96.0 91.1 78.7  according to its output.
<EOS>
Concretely, the sparse link is calculated as:  Z = Atten (cid:0)Hungarian(S), SG(cid:1) = P ∪ Q  (13)  where the attention mechanism Atten is fulfilled by an element-wise “logic OR” function.
<EOS>
Fig 3 shows an example of Hungarian attention procedure, and Eq. (13) highlights the most contributing digit locations: positive digits P = S where Hungarian agrees with the ground-truth; negative digits Q = Hungarian(S) \ SG where Hungarian differs from ground-truth.
<EOS>
While GT (positive digits) naturally points out the digits that must be considered, negative ones indicate the digits that most hinder the matching (most impeding ones among all mis-matchings).
<EOS>
Thus we need only minimize the loss at Z, without considering the rest of digits.
<EOS>
As we note that this mechanism only focuses on a small portion of the matching matrix which is analogous to producing hard attention, we term it Hungarian attention.
<EOS>
Now that with the attention mask Z, the Hungarian attention loss becomes:  HCE = −  (cid:88)  Zij  (cid:0)SG  ij log Sij + (cid:0)1 − SG  ij  (cid:1) log (1 − Sij)(cid:1)  (14)  i∈G1,j∈G2  Note that Hungarian attention mechanism can also be applied to other loss functions once the match- ing score is calculated in an element-wise fashion.
<EOS>
Our experiment also studies Hungarian attention loss when casted on focal loss  and a specifically designed margin loss.
<EOS>
 Finally we give a brief qualitative analysis on why Hungarian attention can improve matching loss.
<EOS>
As discrete graph matching problem is actually built upon Delta function over permutation vertices (1 at ground-truth matching and 0 otherwise) , learning of graph matching with per- mutation loss is actually to approximate such functions with continuous counterparts.
<EOS>
Unfortunately, more precise approximation to Delta function will result in higher non-smoothness, as discussed in Yu et al (2018).
<EOS>
For highly non-smooth objective, the network is more likely trapped at local optima.
<EOS>
Hungarian attention, however, focuses on a small portion of the output locations, thus does not care about if most of the output digits are in {0, 1}.
<EOS>
In this sense, Hungarian attention allows moderate smoothness of the objective, thus optimizer with momentum is likely to avoid local optima.
<EOS>
 4 EXPERIMENTS  Experiments are conducted on three benchmarks widely used for learning-based graph matching: CUB2011 dataset  following the protocol in , Pascal VOC keypoint matching (Everingham et al, 2010; Bourdev & Malik, 2009) which is challenging and Willow Object Class dataset .
<EOS>
Mean matching accuracy is adopted for evaluation:  Acc =  1 k  i∈G1,j∈G2  (cid:88)  AND (cid:0)Hungarian(S)ij, SG  (cid:1)  ij  (15)  The algorithm abbreviation is in the form “X-Y”, where “X” and “Y” refer to the network structure (e.g. CIE) and loss function (e.g. Hungarian attention loss), respectively.
<EOS>
Specifically, D, P and H  7  Published as a conference paper at ICLR 2020  correspond to displacement used in , permutation as adopted in  and Hungarian attention over permutation loss devised by this paper, respectively.
<EOS>
 Peer methods.
<EOS>
We compare our method with the following selected counterparts: 1) HARG .
<EOS>
This shallow learning method is based on hand-crafted feature and Structured SVM; 2) GMN .
<EOS>
This is a seminal work incorporating graph matching and deep learning, and the solver is upon spectral matching .
<EOS>
While the loss of this method is displacement loss, we also report the results of GMN by replacing its loss with permutation loss (GMN-P); 3) PIA/PCA .
<EOS>
PCA and PIA correspond to the algorithms with and without cross-graph node embedding, respectively.
<EOS>
Readers are referred to Wang et al (2019) for more details; We further replace the GNN layer in our framework with: 4) GAT (Veliˇckovi´c et al, 2018).
<EOS>
Graph attention network is an attention mechanism on graphs, which reweights the embedding according to attention score; 5) EPN .
<EOS>
This method exploits multi-dimensional edge embedding and can further be applied on directed graphs.
<EOS>
The edge dimension is set to 32 in our experiments.
<EOS>
Finally, we term our network structure CIE for short.
<EOS>
To investigate the capacity of edge embedding update, we also devise a version without edge embedding, in which connectivity is initialized as reciprocal of the edge length then normalized, rather than A. This model is called PCA+ since the node embedding strategy follows PCA.
<EOS>
 Implementation details.
<EOS>
As the node number of each graph might vary, we add dummy nodes for each graph pair such that the node number reaches the maximal graph size in a mini-batch in line with the protocol in .
<EOS>
In either training or testing stages, these dummy nodes will not be updated or counted.
<EOS>
The activation function in Eq. (9) (10) and (11) is set as Relu  in all experiments.
<EOS>
Specifically, the node and edge embedding is implemented by:  H(l+1)  ·q  = σ  (cid:18)(cid:18)  A (cid:12)  (cid:16)  W(l)  1 E(l)(cid:17)  (cid:19) (cid:16)  ·q  E(l+1)  ·q  = σ  (cid:18)(cid:12) (cid:16) (cid:12) (cid:12) (cid:12)  W(l)  0 H(l)(cid:17)  (cid:16)  W(l)  0 H(l)(cid:17)(cid:62)  (cid:9)  ·q  W(l)  2 H(l)(cid:17) (cid:12) (cid:12) (cid:12) (cid:12)  (cid:12) E(l) ·q  ·q  ·q (cid:19)  (cid:19)  (cid:18)(cid:16)  W(l)  0 H(l)(cid:17)  + σ  (cid:19)  (cid:18)(cid:16)  W(l)  1 E(l)(cid:17)  + σ  ·q (cid:19)  ·q  (16a)  (16b)  where (cid:12) and (cid:9) refer to element-wise product and pairwise difference, respectively.
<EOS>
H·q is the qth channel of H. In CIE1 setting, only node-level merging Eq. (16a) is considered and the edge feature is updated as Eq. (10).
<EOS>
In CIE2 setting, we also replace the edge update Eq. (11) with Eq. (16b).
<EOS>
Note edge embedding is used in both CIE1 and CIE2 and note PCA-H can be regarded as the pure node embedding version of our approach.
<EOS>
The edge feature is initiated as reciprocal of the edge length.
<EOS>
For training, batch size is set to 8.
<EOS>
We employ SGD optimizer (Bottou, 2010) with momentum 0.9. Two CIE layers are stacked after VGG16.
<EOS>
 CUB2011 test CUB2011 consists of 11,788 images from 200 kinds of birds with 15 annotated parts.
<EOS>
We randomly sample image pairs from the dataset following the implementation released by Choy et al (2016).
<EOS>
We do not use the pre-alignment of poses during testing, because their alignment result is not publicly available.
<EOS>
Therefore, there exists significant variation in pose, articulation and appearance across images, in both training and testing phase.
<EOS>
Images are cropped around bounding box and resized to 256 × 256 before fed into the network.
<EOS>
Instead of evaluating the performance in a retrieval fashion , we directly evaluate the matching accuracy since the semantic key-points are pre-given.
<EOS>
We test two settings: 1) intra-class.
<EOS>
During training, we randomly sample images, with each pair sampled from the same category (out of 200 bird cate- gories).
<EOS>
In testing, 2,000 image pairs (100 pairs for each category) are sampled; 2) cross-class.
<EOS>
We analogously sample image pairs without considering the category information and 5,000 randomly sampled image pairs are employed for testing.
<EOS>
While the first setting is for a class-aware situation, the second setting is considered for testing the class-agnostic case.
<EOS>
Results are shown in Table 3.
<EOS>
 We see our method surpasses all the competing methods in terms of matching accuracy.
<EOS>
Besides, almost all the selected algorithms can reach over 90% accuracy, indicating that this dataset contains mostly “easy” learning samples.
<EOS>
In this case, the Hungarian attention can slightly improve the performance since easy gradients agree with descending trend of the loss on the whole dataset.
<EOS>
 Pascal VOC test The Pascal VOC dataset with Key-point annotation  contains 7,020 training images and 1,682 testing images with 20 classes in total.
<EOS>
To the best of our knowledge, this is the largest and most challenging dataset for graph matching in computer vi- sion.
<EOS>
Each image is cropped around its object bounding box and is resized to 256 × 256.
<EOS>
The node  8  Published as a conference paper at ICLR 2020  (a) Accuracy/loss vs. training epoch.
<EOS>
 (b) Ablation study by Hungarian attention.
<EOS>
 Figure 4: Performance study on Pascal VOC.
<EOS>
Note in (a) the loss is calculated on all matching digits for both CIE1-P and CIE1-H.
<EOS>
Note around 10th epoch, the accuracy of CIE1-P almost reaches the highest, but the loss keeps descending until 30th epoch.
<EOS>
This indicates that in most of the latter epochs, P-loss performs “meaningless” back-propagation to drag the output to binary.
<EOS>
H-loss, by accommodating smoothness, can emphasize most contributing digits and achieves higher accuracy. size of this dataset varies from 6 to 23 and there are various scale, pose and illumination perturba- tions.
<EOS>
Experimental results are summarized in Table 1.
<EOS>
We see in either setting, CIE significantly outperforms all peer algorithms.
<EOS>
Specifically, CIE1-H achieves the best performance and has 0.8% improvement w.r.t. average accuracy over CIE1-P.
<EOS>
For each class, CIE1-H and CIE1-P carve up most of the top performance.
<EOS>
We also note that CIE1-H has a close performance on “table” compared with GMN-D.
<EOS>
Since P-loss is naturally not as robust as D-loss on symmetric objects, P-loss showed great degradation over D-loss on “table” (as discussed in ).
<EOS>
However, with the help of Hungarian link, H-loss can maintain relatively high accuracy despite natural ﬂaw of P-loss.
<EOS>
This observation indicates that H-loss can focus on “difficult” examples.
<EOS>
We also note that CIE1 produces better results against CIE2, which implies that updating edge embedding is less effective compared to a singleton node updating strategy.
<EOS>
We can also see from Table 1 that PCA-P has much higher performance on training samples than CIE1-H, which is to the contrary of the result on testing samples.
<EOS>
This might indicate that PCA-P overfits the training samples.
<EOS>
 Accuracy/loss vs. training epoch.
<EOS>
We further show the typical training behavior of P-loss and H- loss on Pascal VOC dataset in Fig 4.
<EOS>
30 epochs are involved in a whole training process.
<EOS>
Accuracy is evaluated on testing samples after each epoch while loss is the average loss value within each epoch.
<EOS>
In the early training stage, the loss of CIE1-P immediately drops.
<EOS>
On the other hand, CIE1-H hesitates for several epochs to find the most effective descending direction.
<EOS>
On the late stage, we observe that even though P-loss (Eq. (12)) calculates much more digits than H-loss (Eq. (14)), the loss values are opposite.
<EOS>
This counter-intuitive fact strongly indicates that P-loss makes meaningless effort, which is not helpful to improve the performance, at late stage.
<EOS>
The proposed H-loss, on the other hand, is capable of avoiding easy but meaningless gradients.
<EOS>
 Effect of Hungarian attention mechanism.
<EOS>
We also conduct experiments to show the improve- ment of Hungarian attention over several loss functions (with and without Hungarian attention): Hungarian attention is applied on Focal loss (Focal)  as:  (cid:40)  Lfocal =  −αZij(1 − Sij)γ log(Sij), −(1 − α)ZijSγ  SG ij log(1 − Sij), SG  ij = 1 ij = 0  where controlling parameters α = 0.75 and γ = 2 in our setting.
<EOS>
We also design a margin loss (Margin) with Hungarian attention under a max-margin rule.
<EOS>
Note we insert the Hungarian attention mask Zij into Eq. (17) and Eq. (18) based on the vanilla forms.
<EOS>
 Lmargin =  (cid:26)Zij × max(1 − Sij − β, 0), SG SG  Zij × max(Sij − β, 0),  ij = 1 ij = 0  (17)  (18)  where we set the margin value β = 0.2. Loss of Eq. (18) is valid because after Softmax and Sinkhorn operations, Sij ∈ [0, 1].
<EOS>
We also show permutation loss (Perm) .
<EOS>
Result can be found in Fig 4 (b) whereby the average accuracy on Pascal VOC is reported.
<EOS>
All the settings are under CIE1.
<EOS>
For either loss, the proposed Hungarian attention can further enhance the accuracy, which is further visualized by a pair of matching results under P-loss and H-loss in Fig 5.
<EOS>
 9  051015202530Epoch0.20.250.30.350.40.450.50.550.60.650.7Accuracy0.511.522.53LossAcc: CIE1-PAcc: CIE1-HLoss: CIE1-PLoss: CIE1-HFocalMarginPerm0.60.620.640.660.680.7Accuracyno Hungwith HungPublished as a conference paper at ICLR 2020  (a) Reference Image  (b) P-loss: 7/10  (c) H-loss: 8/10  Figure 5: Visualization of a matching result: 10 key points in each image with 7 and 8 correct matchings dispalyed, respectively.
<EOS>
Different colors across images indicate node correspondence.
<EOS>
The larger size of dot, the larger is the predicted value Sij. (a) The reference image. (b) Result on the target image from CIE1-P. (c) Result on the target image from CIE1-H.
<EOS>
We see though H-loss i.e. Hungarian attention loss outputs smaller predicted values, it delivers a more accurate matching.
<EOS>
 Table 2: Accuracy (%) on Willow Object.
<EOS>
 face method 91.2 HARG GMN-V 98.1 GMN-W 99.3 100.0 PCA-V PCA-W 100.0 CIE-V 99.9 CIE-W 100.0  mbike 44.4 65.0 71.4 69.8 76.7 71.5 90.0  car 58.4 72.9 74.3 78.6 84.0 75.4 82.2  duck wbottle 55.2 74.3 82.8 82.4 93.5 73.2 81.2  66.6 70.5 76.7 95.1 96.9 97.6 97.6  intra-class  Table 3: Accuracy (%) on CUB. method cross-class GMN-D GMN-P GAT-P PCA-P PCA-H CIE-P CIE-H  89.9 90.8 93.4 93.5 93.5 93.8 94.2  89.6 90.4 93.2 92.9 93.7 94.1 94.4  Willow Object Class test We test the transfer ability on Willow Object Class .
<EOS>
It contains 256 images3 of 5 categories in total, with three categories (face, duck and winebottle) collected from Caltech-256 and resting two (car and motorbike) from Pascal VOC 2007.
<EOS>
This dataset is considered to have bias compared with Pascal VOC since images in the same category are with relatively fixed pose and background is much cleaner.
<EOS>
We crop the object inside its bounding box and resize it to 256 × 256 as CNN input.
<EOS>
While HARG is trained from scratch following the protocol in , all the resting counterparts are either directly pre-trained from the previous section or fine-tuned upon the pre-trained models.
<EOS>
We term the method “X-V” or “X-W” to indicate pre-trained model on Pascal VOC or fine-tuned on Willow, respectively.
<EOS>
CIE refers to CIE1-H for short.
<EOS>
Results in Table 2 suggest that our method is competitive to state-of-the-art.
<EOS>
 5 CONCLUSION  We have presented a novel and effective approach for learning based graph matching.
<EOS>
On one hand, the novelty of our method partially lies in the development of the Hungarian attention, which in- trinsically adapts the matching problem.
<EOS>
It is further observed from the experiments that Hungarian attention can improve several matching-oriented loss functions, which might bring about potential for a series of combinatorial problems.
<EOS>
On the other hand, we also devise the channel independent embedding (CIE) technique for deep graph matching, which decouples the basic merging opera- tions and is shown robust in learning effective graph representation.
<EOS>
Extensive experimental results on multiple matching benchmarks show the leading performance of our solver, and highlight the orthogonal contribution of the two proposed components on top of existing techniques.
<EOS>
 ACKNOWLEDGMENTS  Tianshu Yu and Baoxin Li were supported in part by a grant from ONR.
<EOS>
Any opinions expressed in this material are those of the authors and do not necessarily reﬂect the views of ONR.
<EOS>
Runzhong Wang and Junchi Yan were supported in part by NSFC 61972250 and U19B2035.
<EOS>
 3The data size is too small to train a deep model.
<EOS>
Hence we only evaluate the transfer ability on this dataset.
<EOS>
