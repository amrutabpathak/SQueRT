Published as a conference paper at ICLR 2020  ON THE WEAKNESSES OF REINFORCEMENT LEARN- ING FOR NEURAL MACHINE TRANSLATION  Leshem Choshen1, Lior Fox2, Zohar Aizenbud1, Omri Abend1,3 1 School of Computer Science and Engineering, 2 The Edmond and Lily Safra Center for Brain Sciences 3 Department of Cognitive Sciences The Hebrew University of Jerusalem first.last@mail.huji.ac.il, oabend@cs.huji.ac.il  ABSTRACT  Reinforcement learning (RL) is frequently used to increase performance in text generation tasks, including machine translation (MT), notably through the use of Minimum Risk Training (MRT) and Generative Adversarial Networks (GAN).
<EOS>
However, little is known about what and how these methods learn in the context of MT.
<EOS>
We prove that one of the most common RL methods for MT does not optimize the expected reward, as well as show that other methods take an infeasibly long time to converge.
<EOS>
In fact, our results suggest that RL practices in MT are likely to improve performance only where the pre-trained parameters are already close to yielding the correct translation.
<EOS>
Our findings further suggest that observed gains may be due to effects unrelated to the training signal, concretely, changes in the shape of the distribution curve.
<EOS>
 1  INTRODUCTION  Reinforcement learning (RL) is an appealing path for advancement in Machine Translation (MT), as it allows training systems to optimize non-differentiable score functions, common in MT evaluation, as well as tackling the “exposure bias” (Ranzato et al, 2015) in standard training, namely that the model is not exposed during training to incorrectly generated tokens, and is thus unlikely to recover from generating such tokens at test time.
<EOS>
These motivations have led to much interest in RL for text generation in general and MT in particular (see §2).
<EOS>
Various policy gradient methods have been used, notably REINFORCE (Williams, 1992) and variants thereof (e.g., Ranzato et al, 2015; Edunov et al, 2018) and Minimum Risk Training (MRT; e.g., Och, 2003; Shen et al, 2016).
<EOS>
Another popular use of RL is for training GANs (Yang et al, 2018; Tevet et al, 2018).
<EOS>
Nevertheless, despite increasing interest and strong results, little is known about what accounts for these performance gains, and the training dynamics involved.
<EOS>
 We present the following contributions.
<EOS>
First, our theoretical analysis shows that commonly used approximation methods are theoretically ill-founded, and may converge to parameter values that do not minimize the risk, nor are local minima thereof (§2.2).
<EOS>
 Second, using both naturalistic experiments and carefully constructed simulations, we show that performance gains observed in the literature likely stem not from making target tokens the most probable, but from unrelated effects, such as increasing the peakiness of the output distribution (i.e., the probability mass of the most probable tokens).
<EOS>
We do so by comparing a setting where the reward is informative, vs. one where it is constant.
<EOS>
In §4 we discuss this peakiness effect (PKE).
<EOS>
 Third, we show that promoting the target token to be the mode is likely to take a prohibitively long time.
<EOS>
The only case we find, where improvements are likely, is where the target token is among the first 2-3 most probable tokens according to the pretrained model.
<EOS>
These findings suggest that REINFORCE (§5) and CMRT (§6) are likely to improve over the pre-trained model only under the best possible conditions, i.e., where the pre-trained model is “nearly” correct.
<EOS>
 We conclude by discussing other RL practices in MT which should be avoided for practical and theoretical reasons, and brieﬂy discuss alternative RL approaches that will allow RL to tackle a larger class of errors in pre-trained models (§7).
<EOS>
 1  Published as a conference paper at ICLR 2020  2 RL IN MACHINE TRANSLATION  An MT system generates tokens y = (y1, ..., yn) from a vocabulary V one token at a time.
<EOS>
The probability of generating yi given preceding tokens y<i is given by Pθ(·|x, y<i), where x is the source sentence and θ are the model parameters.
<EOS>
For each generated token yi, we denote with r(yi; y<i, x, y(ref )) the score, or reward, for generating yi given y<i, x, and the reference sentence y(ref ).
<EOS>
For brevity, we omit parameters where they are fixed within context.
<EOS>
For simplicity, we assume r does not depend on following tokens y>i.
<EOS>
 We also assume there is exactly one valid target token, as de facto, training is done against a single reference (Schulz et al, 2018).
<EOS>
In practice, either a token-level reward is approximated using Monte- Carlo methods (e.g., Yang et al, 2018), or a sentence-level (sparse) reward is given at the end of the episode (sentence).
<EOS>
The latter is equivalent to a uniform token-level reward.
<EOS>
 r is often the negative log-likelihood, or a standard MT metric, e.g., BLEU (Papineni et al, 2002).
<EOS>
RL’s goal is to maximize the expected episode reward (denoted with R); i.e., to find  θ∗ = arg max  R(θ) = arg max  Ey∼Pθ [r(y)]  θ  θ  2.1 REINFORCE  For a given source sentence, and past predictions y<i, REINFORCE (Williams, 1992) samples k tokens (k is a hyperparameter) S = (cid:0)y(1), ..., y(k)(cid:1) from Pθ and updates θ according to this rule:  (1)  (2)  ∆θ ∝  r(yi)∇ log(Pθ(yi))  1 k  k  (cid:88)  i=1  The right-hand side of equation 2 is an unbiased estimator of the gradient of the objective function, i.e., E [∆θ] ∝ ∇θR (θ).
<EOS>
Therefore, REINFORCE is performing a form of stochastic gradient ascent on R, and has similar formal guarantees.
<EOS>
From here follows that if R is constant with respect to θ, then the expected ∆θ prescribed by REINFORCE is zero.
<EOS>
We note that r may be shifted by a constant term (called a “baseline”), without affecting the optimal value for θ.
<EOS>
 REINFORCE is used in MT, text generation, and image-to-text tasks (Liu et al, 2016; Wu et al, 2018; Rennie et al, 2017; Shetty et al, 2017; Hendricks et al, 2016) – in isolation, or as a part of training (Ranzato et al, 2015).
<EOS>
Lately, an especially prominent use for REINFORCE is adversarial training with discrete data, where another network predicts the reward (GAN).
<EOS>
For some recent work on RL for NMT, see (Zhang et al, 2016; Li et al, 2017; Wu et al, 2017; Yu et al, 2017; Yang et al, 2018).
<EOS>
 2.2 MINIMUM RISK TRAINING  The term Minimum Risk Training (MRT) is used ambiguously in MT to refer either to the appli- cation of REINFORCE to minimizing the risk (equivalently, to maximizing the expected reward, the negative loss), or more commonly to a somewhat different estimation method, which we term Con- trastive MRT (CMRT) and turn now to analyzing.
<EOS>
CMRT was proposed by Och (2003), adapted to NMT by Shen et al (2016), and often used since (Ayana et al, 2016; Neubig, 2016; Shen et al, 2017; Edunov et al, 2018; Makarov & Clematide, 2018; Neubig et al, 2018).
<EOS>
 The method works as follows: at each iteration, sample k tokens S = {y1,., yk} from Pθ, and update θ according to the gradient of  where  (cid:101)R(θ, S) =  Qθ,S(yi)r(yi) = Ey∼Q  (cid:2)r(y)(cid:3)  k  (cid:88)  i=1  Qθ,S(yi) =  P (yi)α yj ∈S P (yj)α  (cid:80)  Commonly (but not universally), deduplication is performed, so (cid:101)R sums over a set of unique values (Sennrich et al, 2017).
<EOS>
This changes little in our empirical results and theoretical analysis.
<EOS>
 Despite the resemblance in definitions of R (equation 1) and (cid:101)R (indeed, (cid:101)R is sometimes presented as an approximation of R), they differ in two important aspects.
<EOS>
First, Q’s support is S, so increasing  2  Published as a conference paper at ICLR 2020  Q(yi) for some yi necessarily comes at the expense of Q(y) for some y ∈ S. In contrast, increas- ing P (yi), as in REINFORCE, may come at the expense of P (y) for any y ∈ VSecond, α is a smoothness parameter: the closer α is to 0, the closer Q is to be uniform.
<EOS>
 We show in Appendix A.1 that despite its name, CMRT does not optimize R, nor does it optimize E[ (cid:101)R].
<EOS>
That is, it may well converge to values that are not local maxima of R, making it theoretically ill-founded.1 However, given CMRT popularity, the strong results it yielded and the absence of theory for explaining it, we discuss it here.
<EOS>
Given a sample S, the gradient of (cid:101)R is given by  ∇ (cid:101)R = α  Q(yi) · r(yi) · ∇ log P (yi)  − EQ[r]∇ log Z(S)  (3)  (cid:17)  k  (cid:88)  (cid:16)  i=1  where Z(S) = (cid:80)  i P (yi)α.
<EOS>
See Appendix A.2.  Comparing Equations 2 and 3, the differences between REINFORCE and CMRT are reﬂected again.
<EOS>
First, ∇ (cid:101)R has an additional term, proportional to ∇ log Z(S), which yields the contrastive effect.
<EOS>
This contrast may improve the rate of convergence since it counters the decrease of probability mass for non-sampled tokens.
<EOS>
 Second, given S, the relative weighting of the gradients ∇ log P (yi) is proportional to r(yi)Q(yi), or equivalently to r(yi)P (yi)α.
<EOS>
CMRT with deduplication sums over distinct values in S (equation 3), while REINFORCE sums over all values.
<EOS>
This means that the relative weight of the unique value yi is r(yi)|{yi∈S}| in REINFORCE.
<EOS>
For α = 1 the expected value of these relative weights is the same, and so for α < 1 (as is commonly used), more weight is given to improbable tokens, which could also have a positive effect on the convergence rate.2 However, if α is too close to 0, ∇ (cid:101)R vanishes, as it is not affected by θ.
<EOS>
This tradeoff explains the importance of tuning α reported in the literature.
<EOS>
In §6 we present simulations with CMRT, showing very similar trends as presented by REINFORCE.
<EOS>
 k  3 MOTIVATING DISCUSSION  Implementing a stochastic gradient ascent, REINFORCE is guaranteed to converge to a stationary point of R under broad conditions.
<EOS>
However, not much is known about its convergence rate under the prevailing conditions in NMT.
<EOS>
 We begin with a qualitative, motivating analysis of these questions.
<EOS>
As work on language generation empirically showed, RNNs quickly learn to output very peaky distributions (Press et al, 2017).
<EOS>
This tendency is advantageous for generating ﬂuent sentences with high probability, but may also entail slower convergence rates when using RL to fine-tune the model, because RL methods used in text generation sample from the (pretrained) policy distribution, which means they mostly sample what the pretrained model deems to be likely.
<EOS>
Since the pretrained model (or policy) is peaky, exploration of other potentially more rewarding tokens will be limited, hampering convergence.
<EOS>
 Intuitively, REINFORCE increases the probabilities of successful (positively rewarding) observa- tions, weighing updates by how rewarding they were.
<EOS>
When sampling a handful of tokens in each context (source sentence x and generated prefix y<i), and where the number of epochs is not large, it is unlikely that more than a few unique tokens will be sampled from Pθ(·|x, y<i). (In practice, k is typically between 1 and 20, and the number of epochs between 1 and 100.) It is thus unlikely that anything but the initially most probable candidates will be observed.
<EOS>
Consequently, REINFORCE initially raises their probabilities, even if more rewarding tokens can be found down the list.
<EOS>
 We thus hypothesize the peakiness of the distribution, i.e., the probability mass allocated to the most probable tokens, will increase, at least in the first phase.
<EOS>
We call this the peakiness-effect (PKE), and show it occurs both in simulations (§4.1) and in full-scale NMT experiments (§4.2).
<EOS>
 With more iterations, the most-rewarding tokens will be eventually sampled, and gradually gain probability mass.
<EOS>
This discussion suggests that training will be extremely sample-inefficient.
<EOS>
We assess the rate of convergence empirically in §5, finding this to be indeed the case.
<EOS>
 1Sakaguchi et al (2017) discuss the relation between CMRT and REINFORCE, claiming that CMRT is a  variantAppendix A.1 shows that CMRT does not in fact optimize the same objective.
<EOS>
 2Not performing deduplication (e.g. in THUMT (Zhang et al, 2017)) results in assigning higher relative  weight to high-probability tokens, which may have an adverse effect on convergence rate.
<EOS>
 3  Published as a conference paper at ICLR 2020  Figure 1: A histogram of the up- date size (x-axis) to the total pre- dicted probability of the 10 most probable tokens (left) or the most probable token (right) in the Con- stant Reward setting.
<EOS>
An update is overwhelmingly more probable to increase this probability than to decrease it.
<EOS>
 (a) Top 10  (b) Mode  4 THE PEAKINESS EFFECT  We turn to demonstrate that the initially most probable tokens will initially gain probability mass, even if they are not the most rewarding, yielding a PKE.
<EOS>
 Caccia et al (2018) recently observed in the context of language modeling using GANs that per- formance gains similar to those GAN yield can be achieved by decreasing the temperature for the prediction softmax (i.e., making it peakier).
<EOS>
However, they proposed no causes for this effect.
<EOS>
Our findings propose an underlying mechanism leading to this trend.
<EOS>
We return to this point in §7.
<EOS>
Fur- thermore, given their findings, it is reasonable to assume that our results are relevant for RL use in other generation tasks, whose output space too is discrete, high-dimensional and concentrated.
<EOS>
 4.1 CONTROLLED SIMULATIONS  We experiment with a 1-layer softmax model, that predicts a single token i ∈ V with probability eθi j eθjθ = {θj}j∈V are the model’s parameters.
<EOS>
This model simulates the top of any MT decoder (cid:80) that ends with a softmax layer, as essentially all NMT decoders do.
<EOS>
To make experiments realistic, we use similar parameters as those reported in the inﬂuential Transformer NMT system (Vaswani et al, 2017).
<EOS>
Specifically, the size of V (distinct BPE tokens) is 30,715, and the initial values for θ were sampled from 1,000 sets of logits taken from decoding the standard newstest2013 development set, using a pretrained Transformer model.
<EOS>
The model was pretrained on WMT2015 training data (Bojar et al, 2015).
<EOS>
Hyperparameters are reported in Appendix A.3. We define one of the tokens in V to be the target token and denote it with ybest.
<EOS>
We assign deterministic token reward, this makes learning easier than when relying on approximations and our predictions optimistic.
<EOS>
We experiment with two reward functions:  1.
<EOS>
Simulated Reward: r(y) = 2 for y = ybest, r(y) = 1 if y is one of the 10 initially highest scoring tokens, and r(y) = 0 otherwise.
<EOS>
This simulates a condition where the pretrained model is of decent but sub-optimal quality. r here is at the scale of popular rewards used in MT, such as GAN-based rewards or BLEU (which are between 0 and 1).
<EOS>
 2.
<EOS>
Constant Reward: r is constantly equal to 1, for all tokens.
<EOS>
This setting is aimed to  confirm that PKE is not a result of the signal carried by the reward.
<EOS>
 Experiments with the first setting were run 100 times, each time for 50K steps, updating θ after each step.
<EOS>
With the second setting, it is sufficient to take a single step at a time, as the expected update after each step is zero, and so any PKE seen in a single step is only accentuated in the next.
<EOS>
It is, therefore, more telling to run more repetitions rather than more steps per initialization.
<EOS>
We, therefore, sample 10,000 pretrained distributions, and perform a single REINFORCE step.
<EOS>
 As RL training lasts about 30 epochs before stopping, samples about 100K tokens per epoch, and as the network already predicts ybest in about two thirds of the contexts,3 we estimate the number of steps used in practice to be in the order of magnitude of 1M.
<EOS>
For visual clarity, we present figures for 50K-100K steps.
<EOS>
However, full experiments (with 1M steps) exhibit similar trends: where REINFORCE was not close to converging after 50K steps, the same was true after 1M steps.
<EOS>
 We evaluate the peakiness of a distribution in terms of the probability of the most probable token (the mode), the total probability of the ten most probable tokens, and the entropy of the distribution (lower entropy indicates more peakiness).
<EOS>
 3Based on our NMT experiments, which we assume to be representative of the error rate of other systems.
<EOS>
 4  Published as a conference paper at ICLR 2020  (a)  (b)  (c)  Figure 2: Token probabilities through REINFORCE training, in the controlled simulations in the Simulated Reward setting.
<EOS>
The left/center/right figures correspond to simulations where the target token (ybest) was initially the second/third/fourth most probable token.
<EOS>
The green line corresponds to the target token, yellow lines to medium-reward tokens and red lines to no-reward tokens.
<EOS>
 Results.
<EOS>
The distributions become peakier in terms of all three measures: on average, the mode’s probability and the 10 most probable tokens increases, and the entropy decreases.
<EOS>
Figure 1a presents the histogram of the update size, the difference in the probability of the 10 most probable tokens in the Constant Reward setting, after a single step.
<EOS>
Figure 1b depicts similar statistics for the mode.
<EOS>
The average entropy in the pretrained model is 2.9 is reduced to 2.85 after one REINFORCE step.
<EOS>
 Simulated Reward setting shows similar trends.
<EOS>
For example, entropy decreases from 3 to about 0.001 in 100K steps.
<EOS>
This extreme decrease suggests it is effectively a deterministic policy.
<EOS>
PKE is achieved in a few hundred steps, usually before other effects become prominent (see Figure 2), and is stronger than for Constant Reward.
<EOS>
 4.2 NMT EXPERIMENTS  We turn to analyzing a real-world application of REINFORCE to NMT.
<EOS>
Important differences between this and the previous simula- tions are: (1) it is rare in NMT for REINFORCE to sample from the same conditional distribution more than a handful of times, given the number of source sentences x and sentence prefixes y<i (con- texts); and (2) in NMT Pθ(·|x, y<i) shares parameters between con- texts, which means that updating Pθ for one context may inﬂuence Pθ for another.
<EOS>
 We follow the same pretraining as in §4.1. We then follow Yang et al (2018) in defining the reward function based on the expected BLEU score.
<EOS>
Expected BLEU is computed by sampling suffixes for the sentence, and averaging the BLEU score of the sampled sen- tences against the reference.
<EOS>
 We use early stopping with a patience of 10 epochs, where each epoch consists of 5,000 sentences sampled from the WMT2015 (Bojar et al, 2015) German-English training data.
<EOS>
We use k = 1.
<EOS>
We retuned the learning-rate, and positive baseline settings against the development set.
<EOS>
Other hyper-parameters were an exact repli- cation of the experiments reported in (Yang et al, 2018).
<EOS>
 Figure 3: The cumulative distri- bution of the probability of the most likely token in the NMT ex- periments.
<EOS>
The green distribu- tion corresponds to the pretrained model, and the blue corresponds to the reinforced model.
<EOS>
The y- axis is the proportion of condi- tional probabilities with a mode of value ≤ x (the x-axis).
<EOS>
Note that a lower cumulative percent- age means a more peaked output distribution.
<EOS>
A lower cumulative percentage means a more peaked output distribution.
<EOS>
 Results.
<EOS>
Results indicate an increase in the peakiness of the conditional distributions.
<EOS>
Our results are based on a sample of 1,000 contexts from the pretrained model, and another (independent) sample from the reinforced model.
<EOS>
 The modes of the conditional distributions tend to increase.
<EOS>
Figure 3 presents the distribution of the modes’ probability in the reinforced conditional distributions compared with the pretrained model, showing a shift of probability mass towards higher probabilities for the mode, following RL.
<EOS>
Another indication of the increased peakiness is the decrease in the average entropy of Pθ, which was reduced from 3.45 in the pretrained model to an average of 2.82 following RL.
<EOS>
This more modest reduction in entropy (compared to §4.1) might also suggest that the procedure did not converge to the optimal  5  Published as a conference paper at ICLR 2020  value for θ, as then we would have expected the entropy to substantially drop if not to 0 (overfit), then to the average entropy of valid next tokens (given the source and a prefix of the sentence).
<EOS>
 5 PERFORMANCE FOLLOWING REINFORCE  We now turn to assessing under what conditions it is likely that REINFORCE will lead to an improve- ment in the performance of an NMT system.
<EOS>
As in the previous section, we use both controlled simulations and NMT experiments.
<EOS>
 5.1 CONTROLLED SIMULATIONS  We use the same model and experimental setup described in Section 4.1, this time only exploring the Simulated Reward setting, as a Constant Reward is not expected to converge to any meaningful θ.
<EOS>
Results are averaged over 100 conditional distributions sampled from the pretrained model.
<EOS>
 Caution should be exercised when determining the learning rate (LR).
<EOS>
Common LRs used in the NMT literature are of the scale of 10−4.
<EOS>
However, in our simulations, no LR smaller than 0.1 yielded any improvement in R. We thus set the LR to be 0.1. We note that in our simulations, a higher learning rate means faster conver- gence as our reward is noise-free: it is always highest for the best option.
<EOS>
In practice, increasing the learning rate may deteriorate re- sults, as it may cause the system to overfit to the sampled instances.
<EOS>
Indeed, when increasing the learning rate in our NMT experiments (see below) by an order of magnitude, early stopping caused the RL procedure to stop without any parameter updates.
<EOS>
 Figure 2 shows the change in Pθ over the first 50K REINFORCE steps (probabilities are averaged over 100 repetitions), for a case where ybest was initially the second, third and fourth most probable.
<EOS>
Although these are the easiest settings, and despite the high learning rate, it fails to make ybest the mode of the distribution within 100K steps, unless ybest was initially the second most probable.
<EOS>
In cases where ybest is initially of a lower rank than four, it is hard to see any increase in its probability, even after 1M steps.
<EOS>
 Figure 4: Cumulative percentage of contexts where the pretrained model ranks ybest in rank x or below and where it does not rank ybest first (x = 0).
<EOS>
In about half the cases it is ranked fourth or be- low.
<EOS>
 5.2 NMT EXPERIMENTS  We trained an NMT system, using the same procedure as in Section 4.2, and report BLEU scores over the news2014 test set.
<EOS>
After training with an expected BLEU reward, we indeed see a minor improvement which is consistent between trials and pretrained models.
<EOS>
While the pretrain BLEU score is 30.31, the reinforced one is 30.73.
<EOS>
 Analyzing what words were inﬂuenced by the RL procedure, we begin by computing the cumulative probability of the target token ybest to be ranked lower than a given rank according to the pretrained model.
<EOS>
Results (Figure 4) show that in about half of the cases, ybest is not among the top three choices of the pretrained model, and we thus expect it not to gain substantial probability following REINFORCE, according to our simulations.
<EOS>
 We next turn to compare the ranks the reinforced model assigns to the target tokens, and their ranks according to the pretrained model.
<EOS>
Figure 6 presents the difference in the probability that ybest is ranked at a given rank following RL and the probability it is ranked there initially.
<EOS>
Results indicate that indeed more target tokens are ranked first, and less second, but little consistent shift of probability mass occurs otherwise across the ten first ranks.
<EOS>
It is possible that RL has managed to push ybest in some cases between very low ranks (<1,000) to medium-low ranks (between 10 and 1,000).
<EOS>
However, token probabilities in these ranks are so low that it is unlikely to affect the system outputs in any way.
<EOS>
This fits well with the results of our simulations that predicted that only the initially top-ranked tokens are likely to change.
<EOS>
 In an attempt to explain the improved BLEU score following RL with PKE, we repeat the NMT ex- periment this time using a constant reward of 1.
<EOS>
Our results present a nearly identical improvement in BLEU, achieving 30.72, and a similar pattern in the change of the target tokens’ ranks (see Ap-  6  Published as a conference paper at ICLR 2020  Figure 5: The probability of dif- ferent tokens following CMRT, in the controlled simulations in the Simulated Reward setting.
<EOS>
The left/right figures correspond to simulations where the target to- ken (ybest) was initially the sec- ond/third most probable token.
<EOS>
The green line corresponds to the target token, yellow lines to medium-reward tokens and red lines to tokens with r(y) = 0.
<EOS>
 pendix 8).
<EOS>
Therefore, there is room to suspect that even in cases where RL yields an improvement in BLEU, it may partially result from reward-independent factors, such as PKE.4  6 EXPERIMENTS WITH CONTRASTIVE MRT  In §2.2 we showed that CMRT does not, in fact, maximize R, and so does not enjoy the same theoretical guarantees as REINFORCE and similar policy gradient methods.
<EOS>
However, being the RL procedure of choice in much recent work we repeat the simulations described in §4 and §5, assessing CMRT’s performance in these conditions.
<EOS>
We experiment with α = 0.005 and k = 20, common settings in the literature, and average over 100 trials.
<EOS>
 Figure 5 shows how the distribution Pθ changes over the course of 50K update steps to θ, where ybest is taken to be the second and third initially most probable token (Simulated Reward setting).
<EOS>
Results are similar in trends to those obtained with REINFORCE: MRT succeeds in pushing ybest to be the highest ranked token if it was initially second, but struggles where it was initially ranked third or below.
<EOS>
We only observe a small PKE in MRT.
<EOS>
This is probably due to the contrastive effect, which means that tokens that were not sampled do not lose probability mass.
<EOS>
 All graphs we present here allow sampling the same token more than once in each batch (i.e., S is a sample with replacements).
<EOS>
Simulations with deduplication show similar results.
<EOS>
 7 DISCUSSION  Figure 6: Difference between the ranks of ybest in the rein- forced and the pretrained model.
<EOS>
Each column x corresponds to the difference in the probabil- ity that ybest is ranked in rank x in the reinforced model, and the same probability in the pre- trained model.
<EOS>
 In this paper, we showed that the type of distributions used in NMT entail that promoting the target token to be the mode is likely to take a prohibitively long times for existing RL practices, except under the best conditions (where the pretrained model is “nearly” correct).
<EOS>
This leads us to conclude that observed improvements from using RL for NMT are likely due either to fine-tuning the most probable tokens in the pretrained model (an effect which may be more easily achieved using rerank- ing methods, and uses but little of the power of RL methods), or to effects unrelated to the signal carried by the reward, such as PKE.
<EOS>
Another contribution of this paper is in showing that CMRT does not optimize the expected reward and is thus theoretically unmotivated.
<EOS>
 A number of reasons lead us to believe that in our NMT experiments, improvements are not due to the reward function, but to artefacts such as PKE.
<EOS>
First, reducing a constant baseline from r, so as to make the expected reward zero, disallows learning.
<EOS>
This is surprising, as REINFORCE, generally and in our simulations, converges faster where the reward is centered around zero, and so the fact that this procedure here disallows learning hints that other factors are in play.
<EOS>
As PKE can be observed even where the reward is constant (if the expected reward is positive; see §4.1), this suggests PKE  4We tried several other reward functions as well, all of which got BLEU scores of 30.73–30.84.
<EOS>
This  improvement is very stable across metrics, trials and pretrained models.
<EOS>
 7  Published as a conference paper at ICLR 2020  may play a role here.
<EOS>
Second, we observe more peakiness in the reinforced model and in such cases, we expect improvements in BLEU (Caccia et al, 2018).
<EOS>
Third, we achieve similar results with a constant reward in our NMT experiments (§5.2).
<EOS>
Fourth, our controlled simulations show that asymptotic convergence is not reached in any but the easiest conditions (§5.1).
<EOS>
 Our analysis further suggests that gradient clipping, sometimes used in NMT (Zhang et al, 2016; Wieting et al, 2019), is expected to hinder convergence further.
<EOS>
It should be avoided when using REINFORCE as it violates REINFORCE’s assumptions.
<EOS>
 The per-token sampling as done in our experiments is more exploratory than beam search (Wu et al, 2018), reducing PKE.
<EOS>
Furthermore, the latter does not sample from the behavior policy, but does not properly account for being off-policy in the parameter updates.
<EOS>
 Adding the reference to the sample S, which some implementations allow (Sennrich et al, 2017) may help reduce the problems of never sampling the target tokens.
<EOS>
However, as Edunov et al (2018) point out, this practice may lower results, as it may destabilize training by leading the model to improve over outputs it cannot generalize over, as they are very different from anything the model assigns a high probability to, at the cost of other outputs.
<EOS>
 8 CONCLUSION  The standard MT scenario poses several uncommon challenges for RL.
<EOS>
First, the action space in MT problems is a high-dimensional discrete space (generally in the size of the vocabulary of the target language or the product thereof for sentences).
<EOS>
This contrasts with the more common sce- nario studied by contemporary RL methods, which focuses mostly on much smaller discrete action spaces (e.g., video games (Mnih et al, 2015; 2016)), or continuous action spaces of relatively low dimensions (e.g., simulation of robotic control tasks (Lillicrap et al, 2015)).
<EOS>
Second, reward for MT is naturally very sparse – almost all possible sentences are “wrong” (hence, not rewarding) in a given context.
<EOS>
Finally, it is common in MT to use RL for tuning a pretrained model.
<EOS>
Using a pretrained model ameliorates the last problem.
<EOS>
But then, these pretrained models are in general quite peaky, and because training is done on-policy – that is, actions are being sampled from the same model being optimized – exploration is inherently limited.
<EOS>
 Here we argued that, taken together, these challenges result in significant weaknesses for current RL practices for NMT, that may ultimately prevent them from being truly useful.
<EOS>
At least some of these challenges have been widely studied in the RL literature, with numerous techniques developed to address them, but were not yet adopted in NLP.
<EOS>
We turn to discuss some of them.
<EOS>
 Off-policy methods, in which observations are sampled from a different policy than the one being currently optimized, are prominent in RL (Watkins & Dayan, 1992; Sutton & Barto, 1998), and were also studied in the context of policy gradient methods (Degris et al, 2012; Silver et al, 2014).
<EOS>
In principle, such methods allow learning from a more “exploratory” policy.
<EOS>
Moreover, a key mo- tivation for using α in CMRT is smoothing; off-policy sampling allows smoothing while keeping convergence guarantees.
<EOS>
 In its basic form, exploration in REINFORCE relies on stochasticity in the action-selection (in MT, this is due to sampling).
<EOS>
More sophisticated exploration methods have been extensively studied, for example using measures for the exploratory usefulness of states or actions (Fox et al, 2018), or relying on parameter-space noise rather than action-space noise (Plappert et al, 2017).
<EOS>
 For MT, an additional challenge is that even effective exploration (sampling diverse sets of obser- vations), may not be enough, since the state-action space is too large to be effectively covered, with almost all sentences being not rewarding.
<EOS>
Recently, diversity-based and multi-goal methods for RL were proposed to tackle similar challenges (Andrychowicz et al, 2017; Ghosh et al, 2018; Eysen- bach et al, 2019).
<EOS>
We believe the adoption of such methods is a promising path forward for the application of RL in NLP.
<EOS>
 8  Published as a conference paper at ICLR 2020  9 ACKNOWLEDGMENTS  This work was supported by the Israel Science Foundation (grant no.
<EOS>
929/17) and by the HUJI Cyber Security Research Center in conjunction with the Israel National Cyber Bureau in the Prime Minister’s Office.
<EOS>
 REFERENCES  Marcin Andrychowicz, Filip Wolski, Alex Ray, Jonas Schneider, Rachel Fong, Peter Welinder, Bob McGrew, Josh Tobin, OpenAI Pieter Abbeel, and Wojciech Zaremba.
<EOS>
Hindsight experience re- play.
<EOS>
In Advances in Neural Information Processing Systems, pp 5048–5058, 2017.
<EOS>
 Shiqi Shen Ayana, Zhiyuan Liu, and Maosong Sun.
<EOS>
Neural headline generation with minimum risk  training. arXiv preprint arXiv:1604.01904, 2016.
<EOS>
 Ondrej Bojar, Rajen Chatterjee, Christian Federmann, Barry Haddow, Matthias Huck, Chris Hokamp, Philipp Koehn, Varvara Logacheva, Christof Monz, Matteo Negri, Matt Post, Carolina Scarton, Lucia Specia, and Marco Turchi.
<EOS>
Findings of the 2015 workshop on statistical machine translation.
<EOS>
In WMT@EMNLP, 2015.
<EOS>
 Massimo Caccia, Lucas Caccia, William Fedus, Hugo Larochelle, Joelle Pineau, and Laurent Char- lin.
<EOS>
Language gans falling short. arXiv preprint arXiv:1811.02549, 2018.
<EOS>
URL https: //arxiv.org/pdf/1811.02549.pdf.
<EOS>
 Thomas Degris, Martha White, and Richard S Sutton.
<EOS>
Off-policy actor-critic. arXiv preprint  arXiv:1205.4839, 2012.
<EOS>
 Sergey Edunov, Myle Ott, Michael Auli, David Grangier, and Marc’Aurelio Ranzato.
<EOS>
Classical structured prediction losses for sequence to sequence learning.
<EOS>
In Proceedings of the 2018 Con- ference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long Papers), pp 355–364.
<EOS>
Association for Computational Linguistics, 2018. doi: 10.18653/v1/N18-1033.
<EOS>
URL http://aclweb.org/anthology/ N18-1033.
<EOS>
 Benjamin Eysenbach, Abhishek Gupta, Julian Ibarz, and Sergey Levine.
<EOS>
Diversity is all you need: Learning skills without a reward function.
<EOS>
In International Conference on Learning Representa- tions, 2019.
<EOS>
URL https://openreview.net/forum?id=SJx63jRqFm.
<EOS>
 Lior Fox, Leshem Choshen, and Yonatan Loewenstein.
<EOS>
Dora the explorer: Directed outreaching  reinforcement action-selection.
<EOS>
ICLR, abs/1804.04012, 2018.
<EOS>
 Dibya Ghosh, Avi Singh, Aravind Rajeswaran, Vikash Kumar, and Sergey Levine.
<EOS>
Divide-and- conquer reinforcement learning.
<EOS>
In International Conference on Learning Representations, 2018.
<EOS>
URL https://openreview.net/forum?id=rJwelMbR-.
<EOS>
 Lisa Anne Hendricks, Zeynep Akata, Marcus Rohrbach, Jeff Donahue, Bernt Schiele, and Trevor  Darrell.
<EOS>
Generating visual explanations.
<EOS>
In ECCV, 2016.
<EOS>
 Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization.
<EOS>
CoRR,  abs/1412.6980, 2015.
<EOS>
 Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris Callison-Burch, Marcello Federico, Nicola Bertoldi, Brooke Cowan, Wade Shen, Christine Moran, Richard Zens, Chris Dyer, Ondrej Bojar, Alexandra Constantin, and Evan Herbst.
<EOS>
Moses: Open source toolkit for statistical machine In Proceedings of the 45th Annual Meeting of the Association for Computational translation.
<EOS>
Linguistics Companion Volume Proceedings of the Demo and Poster Sessions, pp 177–180, 2007.
<EOS>
 Jiwei Li, Will Monroe, Tianlin Shi, Sébastien Jean, Alan Ritter, and Dan Jurafsky.
<EOS>
Adversarial learn- ing for neural dialogue generation.
<EOS>
In Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pp 2157–2169, Copenhagen, Denmark, September 2017.
<EOS>
As- sociation for Computational Linguistics.
<EOS>
URL https://www.aclweb.org/anthology/ D17-1230.
<EOS>
 9  Published as a conference paper at ICLR 2020  Timothy P Lillicrap, Jonathan J Hunt, Alexander Pritzel, Nicolas Heess, Tom Erez, Yuval Tassa, David Silver, and Daan Wierstra.
<EOS>
Continuous control with deep reinforcement learning. arXiv preprint arXiv:1509.02971, 2015.
<EOS>
 Siqi Liu, Zhenhai Zhu, Ning Ye, Sergio Guadarrama, and Kevin Murphy.
<EOS>
Optimization of image  description metrics using policy gradient methods.
<EOS>
CoRR, abs/1612.00370, 2, 2016.
<EOS>
 Peter Makarov and Simon Clematide.
<EOS>
Neural transition-based string transduction for limited-  resource setting in morphology.
<EOS>
In COLING, 2018.
<EOS>
 Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A Rusu, Joel Veness, Marc G Belle- mare, Alex Graves, Martin Riedmiller, Andreas K Fidjeland, Georg Ostrovski, et al Human-level control through deep reinforcement learning.
<EOS>
Nature, 518(7540):529–533, 2015.
<EOS>
 Volodymyr Mnih, Adria Puigdomenech Badia, Mehdi Mirza, Alex Graves, Timothy Lillicrap, Tim Harley, David Silver, and Koray Kavukcuoglu.
<EOS>
Asynchronous methods for deep reinforcement learning.
<EOS>
In International conference on machine learning, pp 1928–1937, 2016.
<EOS>
 Graham Neubig.
<EOS>
Lexicons and minimum risk training for neural machine translation: Naist-cmu at  wat2016.
<EOS>
In WAT@COLING, 2016.
<EOS>
 Graham Neubig, Matthias Sperber, Xinyi Wang, Matthieu Felix, Austin Matthews, Sarguna Pad- manabhan, Ye Qi, Devendra Singh Sachan, Philip Arthur, Pierre Godard, John Hewitt, Rachid Riad, and Liming Wang.
<EOS>
Xnmt: The extensible neural machine translation toolkit.
<EOS>
In AMTA, 2018.
<EOS>
 Franz Josef Och.
<EOS>
Minimum error rate training in statistical machine translation.
<EOS>
In Proceedings of the 41st Annual Meeting on Association for Computational Linguistics-Volume 1, pp 160–167.
<EOS>
Association for Computational Linguistics, 2003.
<EOS>
 Kishore Papineni, Salim Roukos, Todd Ward, and Wei-Jing Zhu.
<EOS>
Bleu: a method for automatic evaluation of machine translation.
<EOS>
In Proceedings of the 40th annual meeting on association for computational linguistics, pp 311–318.
<EOS>
Association for Computational Linguistics, 2002.
<EOS>
URL https://www.aclweb.org/anthology/P02-1040.pdf.
<EOS>
 Matthias Plappert, Rein Houthooft, Prafulla Dhariwal, Szymon Sidor, Richard Y Chen, Xi Chen, Tamim Asfour, Pieter Abbeel, and Marcin Andrychowicz.
<EOS>
Parameter space noise for exploration. arXiv preprint arXiv:1706.01905, 2017.
<EOS>
 O. Press, A. Bar, B. Bogin, J. Berant, and L. Wolf.
<EOS>
Language generation with recurrent generative In Fist Workshop on Learning to Generate Natural  adversarial networks without pre-training.
<EOS>
Language@ICML, 2017.
<EOS>
 Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli, and Wojciech Zaremba.
<EOS>
Sequence level train-  ing with recurrent neural networks. arXiv preprint arXiv:1511.06732, 2015.
<EOS>
 Steven J Rennie, Etienne Marcheret, Youssef Mroueh, Jerret Ross, and Vaibhava Goel.
<EOS>
Self-critical sequence training for image captioning.
<EOS>
In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pp 7008–7024, 2017.
<EOS>
 Keisuke Sakaguchi, Matt Post, and Benjamin Van Durme.
<EOS>
Grammatical error correction with neural  reinforcement learning. arXiv preprint arXiv:1707.00299, 2017.
<EOS>
 Philip Schulz, Wilker Aziz, and Trevor Cohn.
<EOS>
A stochastic decoder for neural machine translation.
<EOS>
 In ACL, 2018.
<EOS>
 Rico Sennrich, Barry Haddow, and Alexandra Birch.
<EOS>
Neural machine translation of rare words with subword units.
<EOS>
In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), volume 1, pp 1715–1725, 2016.
<EOS>
URL http://www. aclweb.org/anthology/P16-1162.
<EOS>
 Rico Sennrich, Orhan Firat, Kyunghyun Cho, Alexandra Birch, Barry Haddow, Julian Hitschler, Marcin Junczys-Dowmunt, Samuel Läubli, Antonio Valerio Miceli Barone, Jozef Mokry, and Maria Nadejde.
<EOS>
Nematus: a toolkit for neural machine translation.
<EOS>
In EACL, 2017.
<EOS>
 10  Published as a conference paper at ICLR 2020  Shiqi Shen, Yong Cheng, Zhongjun He, Wei He, Hua Wu, Maosong Sun, and Yang Liu.
<EOS>
Minimum risk training for neural machine translation.
<EOS>
In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pp 1683–1692.
<EOS>
Association for Computational Linguistics, 2016. doi: 10.18653/v1/P16-1159.
<EOS>
URL http://aclweb. org/anthology/P16-1159.
<EOS>
 Shiqi Shen, Yang Liu, and Maosong Sun.
<EOS>
Optimizing non-decomposable evaluation metrics for  neural machine translation.
<EOS>
Journal of Computer Science and Technology, 32:796–804, 2017.
<EOS>
 Rakshith Shetty, Marcus Rohrbach, Lisa Anne Hendricks, Mario Fritz, and Bernt Schiele.
<EOS>
Speaking the same language: Matching machine to human captions by adversarial training.
<EOS>
In 2017 IEEE International Conference on Computer Vision (ICCV), pp 4155–4164.
<EOS>
IEEE, 2017.
<EOS>
 David Silver, Guy Lever, Nicolas Heess, Thomas Degris, Daan Wierstra, and Martin Riedmiller.
<EOS>
 Deterministic policy gradient algorithms.
<EOS>
In ICML, 2014.
<EOS>
 Richard S Sutton and Andrew G Barto.
<EOS>
Reinforcement learning: An introduction.
<EOS>
MIT press, 1998.
<EOS>
 G. Tevet, G. Habib, V. Shwartz, and J. Berant.
<EOS>
Evaluating text GANs as language models. arXiv  preprint arXiv:1810.12686, 2018.
<EOS>
 Tijmen Tieleman and Geoffrey Hinton.
<EOS>
Lecture 6.5-rmsprop: Divide the gradient by a running average of its recent magnitude.
<EOS>
COURSERA: Neural networks for machine learning, 4(2):26– 31, 2012.
<EOS>
 Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz Kaiser, and Illia Polosukhin.
<EOS>
Attention is all you need.
<EOS>
In Advances in Neural Informa- tion Processing Systems, pp 5998–6008, 2017.
<EOS>
URL https://papers.nips.cc/paper/ 7181-attention-is-all-you-need.pdf.
<EOS>
 Christopher JCH Watkins and Peter Dayan.
<EOS>
Q-learning.
<EOS>
Machine learning, 8(3-4):279–292, 1992.
<EOS>
 John Wieting, Taylor Berg-Kirkpatrick, Kevin Gimpel, and Graham Neubig.
<EOS>
Beyond BLEU: Train- In The 57th Annual Meeting of the ing neural machine translation with semantic similarity.
<EOS>
Association for Computational Linguistics (ACL), Florence, Italy, July 2019.
<EOS>
URL https: //arxiv.org/abs/1909.06694.
<EOS>
 Ronald J Williams.
<EOS>
Simple statistical gradient-following algorithms for connectionist reinforcement  learning.
<EOS>
Machine learning, 8(3-4):229–256, 1992.
<EOS>
 Lijun Wu, Yingce Xia, Li Zhao, Fei Tian, Tao Qin, Jianhuang Lai, and Tie-Yan Liu.
<EOS>
Adversarial  neural machine translation. arXiv preprint arXiv:1704.06933, 2017.
<EOS>
 Lijun Wu, Fei Tian, Tao Qin, Jianhuang Lai, and Tie-Yan Liu.
<EOS>
A study of reinforcement learning  for neural machine translation.
<EOS>
In EMNLP, 2018.
<EOS>
 Zhen Yang, Wei Chen, Feng Wang, and Bo Xu. Improving neural machine translation with condi- tional sequence generative adversarial nets.
<EOS>
In Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technolo- gies, Volume 1 (Long Papers), pp 1346–1355.
<EOS>
Association for Computational Linguistics, 2018. doi: 10.18653/v1/N18-1122.
<EOS>
URL http://aclweb.org/anthology/N18-1122.
<EOS>
 Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu. Seqgan: Sequence generative adversarial nets  with policy gradient.
<EOS>
In AAAI, pp 2852–2858, 2017.
<EOS>
 Jiac heng Zhang, Yanzhuo Ding, Shiqi Shen, Yong Cheng, Maosong Sun, Huanbo Luan, and Yang Liu.
<EOS>
Thumt: An open source toolkit for neural machine translation. arXiv preprint arXiv:1706.06415, 2017.
<EOS>
 Yizhe Zhang, Zhe Gan, and Lawrence Carin.
<EOS>
Generating text via adversarial training.
<EOS>
 In NIPS  workshop on Adversarial Training, volume 21, 2016.
<EOS>
 11  Published as a conference paper at ICLR 2020  A APPENDIX  A.1 CONTRASTIVE MRT DOES NOT MAXIMIZE THE EXPECTED REWARD  We hereby detail a simple example where following the Contrastive MRT method (see §2.2) does not converge to the parameter value that maximizes R.  Let θ be a real number in [0, 0.5], and let Pθ be a family of distributions over three values a, b, c such that:  Let r(a) = 1, r(b) = 0, r(c) = 0.5. The expected reward as a function of θ is:  Pθ (x) =       x = a θ 2θ2 x = b 1 − θ − 2θ2 x = c  R(θ) = θ + 0.5(1 − θ − 2θ2)  R(θ) is uniquely maximized by θ∗ = 0.25.
<EOS>
 Table 1 details the possible samples of size k = 2, their probabilities, the corresponding (cid:101)R and its gradient.
<EOS>
Standard numerical methods show that E[∇ (cid:101)R] over possible samples S is positive for θ ∈ (0, γ) and negative for θ ∈ (γ, 0.5], where γ ≈ 0.295.
<EOS>
This means that for any initialization of θ ∈ (0, 0.5], Contrastive MRT will converge to γ if the learning rate is sufficiently small.
<EOS>
For θ = 0, (cid:101)R ≡ 0.5, and there will be no gradient updates, so the method will converge to θ = 0.
<EOS>
Neither of these values maximizes R(θ).
<EOS>
We note that by using some g (θ) the γ could be arbitrarily far from θ∗. g could also map to (−inf, inf ) more often used in neural networks parameters.
<EOS>
 We further note that resorting to maximizing E[ (cid:101)R] instead, does not maximize R(θ) either.
<EOS>
Indeed, plotting E[ (cid:101)R] as a function of θ for this example, yields a maximum at θ ≈ 0.32.
<EOS>
 Table 1: The gradients of (cid:101)R for each possible sample S. The batch size is k = 2.
<EOS>
Rows correspond to different sampled outcomes. ∇ (cid:101)R is the gradient of (cid:101)R given the corresponding value for S.  S  {a, b}  {a, c}  {b, c} a, a b, b c, c  P (S) 4θ3  θ2 4θ4  (1-θ-2θ2)2  2θ(1-θ-2θ2) 4θ2(1-θ-2θ2)  0.5 +  θ  2−4θ2  1−θ−2θ2  2−2θ  (cid:101)R 1  1+2θ  1 0 0.5  ∇ (cid:101)R −2  (1+2θ)2 2x2+1  2(1−2θ2)2  θ2−2θ (1−θ)2  0 0 0  A.2 DERIVING THE GRADIENT OF (cid:101)R  Given S, recall the definition of (cid:101)R:  Taking the deriviative w.r.t. θ:  (cid:101)R(θ, S) =  Qθ,S(yi)r(yi)  k  (cid:88)  i=1  12  Published as a conference paper at ICLR 2020  k  (cid:88)  i=1  r(yi)  ∇P (y) · αP (y)α−1 · Z(S) − ∇Z(S) · P (y)α  =  Z(S)2  k  (cid:88)  i=1  k  (cid:88)  i=1  k  (cid:88)  (cid:16)  α  i=1  r(yi)  (cid:16) α∇P (yi)  P (yi)  Q(yi) −  ∇Z(S) Z(S)  (cid:17)  Q(yi)  =  r(yi)Q(yi)  α∇ log P (yi) − ∇ log Z(S)  =  (cid:16)  (cid:17)  r(yi)Q(yi)∇ log P (yi)  − EQ[r]∇ log Z(S)  (cid:17)  (a)  (b)  (c)  Figure 7: The probability of different tokens following REINFORCE, in the controlled simulations in the Con- stant Reward setting.
<EOS>
The left/center/right figures correspond to simulations where the target token (ybest) was initially the second/third/fourth most probable token.
<EOS>
The green line corresponds to the target token, yellow lines to medium-reward tokens and red lines to tokens with r(y) = 0.
<EOS>
 A.3 NMT IMPLEMENTATION DETAILS  True casing and tokenization were used (Koehn et al, 2007), including escaping html symbols and "-" that represents a compound was changed into a separate token of =.
<EOS>
Some preprocessing used before us converted the latter to ##AT##-##AT## but standard tokenizers in use process that into 11 different tokens, which over-represents the significance of that character when BLEU is calculated.
<EOS>
BPE (Sennrich et al, 2016) extracted 30,715 tokens.
<EOS>
For the MT experiments we used 6 layers in the encoder and the decoder.
<EOS>
The size of the embeddings was 512.
<EOS>
Gradient clipping was used with size of 5 for pre-training (see Discussion on why not to use it in training).
<EOS>
We did not use attention dropout, but 0.1 residual dropout rate was used.
<EOS>
In pretraining and training sentences of more than 50 tokens were discarded.
<EOS>
Pretraining and training were considered finished when BLEU did not increase in the development set for 10 consecutive evaluations, and evaluation was done every 1,000 and 5,000 for batches of size 100 and 256 for pretraining and training respectively.
<EOS>
Learning rate used for rmsprop (Tieleman & Hinton, 2012) was 0.01 in pretraining and for adam (Kingma & Ba, 2015) with decay was 0.005 for training.
<EOS>
4,000 learning rate warm up steps were used.
<EOS>
Pretraining took about 7 days with 4 GPUs, afterwards, training took roughly the same time.
<EOS>
Monte Carlo used 20 sentence rolls per word.
<EOS>
 A.4 DETAILED RESULTS FOR CONSTANT REWARD SETTING  We present graphs for the constant reward setting in Figures 8 and 7.
<EOS>
Trends are similar to the ones obtained for the Simulated Reward setting.
<EOS>
 13  Published as a conference paper at ICLR 2020  Figure 8: Difference between the ranks of ybest in the reinforced with constant reward and the pretrained model.
<EOS>
Each column x corresponds to the difference in the probability that ybest is ranked in rank x in the reinforced model, and the same probability in the pretrained model.
<EOS>
 14  
<EOS>
