Implemented Albert second stage question answering 
Albert is the second stage for the question answering. Its responsibility is to take in the relevant snippets provided by the stage one and using a pretrained model on SQUAD V2.0 dataset return what it thinks is the answer to the query over the relevant snippets. So, for each relevant snippet there will be an answer. Though that answer can be blank if Albert cannot identify a relevant answer within the snippet.
The answers are then aggregated using fuzzy string comparison. This is done using the Levenshtein’s distance, which just the number of changes it will take to match another string. The distance was implemented using a package called fuzzy wuzzy. Then the frequency of the string matching within a certain threshold (currently 70%) is aggregated within a map and the most frequent string is returned as the answer to the query. In the case of ties the longest string is returned in hopes that will be the most descriptive of the answers.
	
Snippetizer and Data cleaning
In ProcessText.py the function snippetProducerSplit is responsible for snippetizing the paper. snippetizing is the separating of each section of the paper into small chunks to make it easier for the first stage processing (identifying relevant snippets) to get accurate results. The models that identify relevant snippets are more accurate the shorter the results are so snippetProducerSplit the paper into sentences. This is done through a regex looking at what appears before and after the periods, question marks and exclamations points to not separate decimals within number or other places periods are used. Then through a passed parameter the snippet size will be that number of sentences. So, if the parameter is three then each snippet will have three sentences. Three was the parameter that we decided would work the best for the project because its not so long that it makes the relevant snippets inaccurate but provides enough context that its more likely that stage two will return the relevant answer.
The snippetizer function also is responsible for data cleaning. It replaces words that end in periods that are not at the end of sentences. Such as et al. which would be replaced to et al without a period. It also removes the reference section from the end of the paper because our first stage model kept on identifying references as relevant snippets even though they weren’t. Also, it attempts to remove some amount of the intext citations from the paper. It does this by using a regex that looks at the pattern of words within the parenthesis and if it matches a citation pattern it removes the words within the parenthesis and the parenthesis themselves.
Deployment to Heroku
The project is hosted on Heroku. This is so others can access our application and do not have to run it their local machine.
